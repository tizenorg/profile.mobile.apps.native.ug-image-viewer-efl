/*
* Copyright (c) 2000-2015  Samsung Electronics Co., Ltd All Rights Reserved
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/

#define CTXPOPUP_SHADOW_PADDING 10
#define CTXPOPUP_FRAME_CORNER_SIZE 4 4
#define CTXPOPUP_FONT_COLOR 0 0 0 255
#define CTXPOPUP_CLICKED_FONT_COLOR 255 255 255 255
#define CTXPOPUP_LIST_PADDING 10
#define CTXPOPUP_LIST_SHADOW_PADDING 3

///////////////////////////////////////////////////////////////////////////////

group {
   name: "elm/ctxpopup/layout/default";
   alias: "elm/ctxpopup/layout/copypaste";
   max: (CTXPOPUP_WIDTH_MAX_INC+CTXPOPUP_SHADOW_LEFT_PADDING+CTXPOPUP_SHADOW_RIGHT_PADDING) ((CTXPOPUP_ITEM_HEIGHT_MIN_INC*7)+CTXPOPUP_SHADOW_TOP_PADDING+CTXPOPUP_SHADOW_BOTTOM_PADDING+(CTXPOPUP_SEPARATOR_PXLINE_SIZE_INC*14));
   parts {
      part {
         name:"top_padding";
         type: RECT;
         scale: 1;
         description {
            state: "default" 0.0;
            min: 0 CTXPOPUP_MOVE_PAD_INC;
            visible: 0;
            fixed: 0 1;
            align: 0.5 0.0;
            rel1.relative: 0.0 0.0;
            rel2.relative: 1.0 0.0;
         }
         description {
            state: "show_up" 0.0;
            inherit: "default" 0.0;
         }
         description {
            state: "visible" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      part {
         name:"bottom_padding";
         type: RECT;
         scale: 1;
         description {
            state: "default" 0.0;
            min: 0 CTXPOPUP_MOVE_PAD_INC;
            visible: 0;
            fixed: 0 1;
            align: 0.5 1.0;
            rel1.relative: 0.0 1.0;
            rel2.relative: 1.0 1.0;
         }
         description {
            state: "show_down" 0.0;
            inherit: "default" 0.0;
         }
         description {
            state: "visible" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      part {
         name:"left_padding";
         type: RECT;
         scale: 1;
         description {
            state: "default" 0.0;
            min: CTXPOPUP_MOVE_PAD_INC 0;
            visible: 0;
            fixed: 1 0;
            align: 0.0 0.5;
            rel1.relative: 0.0 0.0;
            rel2.relative: 0.0 1.0;
         }
         description {
            state: "show_left" 0.0;
            inherit: "default" 0.0;
         }
         description {
            state: "visible" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      part {
         name:"right_padding";
         type: RECT;
         scale: 1;
         description {
            state: "default" 0.0;
            min: CTXPOPUP_MOVE_PAD_INC 0;
            visible: 0;
            fixed: 1 0;
            align: 1 0.5;
            rel1.relative: 1.0 0.0;
            rel2.relative: 1.0 1.0;
         }
         description {
            state: "show_right" 0.0;
            inherit: "default" 0.0;
         }
         description {
            state: "visible" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
      }
      part {
         name: "swallow";
         type: SWALLOW;
         clip_to: "layout_clip";
         scale: 1;
         description {
            state: "default" 0.0;
            visible: 0;
         }
         description {
            state: "show_up" 0.0;
            rel1 {to_x:"left_padding"; to_y:"top_padding"; relative: 1.0 1.0;}
            rel2 {to_x:"right_padding"; to_y:"top_padding"; relative: 0.0 1.0;}
            align: 0.5 0.0;
         }
         description {
            state: "show_down" 0.0;
            rel1 {to_x:"left_padding"; to_y:"bottom_padding"; relative: 1.0 0.0;}
            rel2 {to_x:"right_padding"; to_y:"bottom_padding"; relative: 0.0 0.0;}
            align: 0.5 1.0;
         }
         description {
            state: "show_left" 0.0;
            rel1 {to_x:"left_padding"; to_y:"top_padding"; relative: 1.0 1.0;}
            rel2 {to_x:"left_padding"; to_y:"bottom_padding"; relative: 1.0 0.0;}
            align: 0.0 0.5;
         }
         description {
            state: "show_right" 0.0;
            rel1 {to_x:"right_padding"; to_y:"top_padding"; relative: 0.0 1.0;}
            rel2 {to_x:"right_padding"; to_y:"bottom_padding"; relative: 0.0 0.0;}
            align: 1.0 0.5;
         }
      }
      part {
         name: "event_blocker";
         type: RECT;
         scale: 1;
         description {
            state: "default" 0.0;
            visible: 1;
            color: 0 0 0 0;
         }
         description {
            state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part {
         name: "layout_clip";
         type: RECT;
         scale: 1;
         description {
            state: "default" 0.0;
            color: 255 255 255 0;
            rel1 {to: "swallow"; relative: -0.2 -0.2; }
            rel2 {to: "swallow"; relative: 1.2 1.2;}
         }
         description {
            state: "visible" 0.0;
            inherit: "default" 0.0;
            color: 255 255 255 255;
         }
      }
   }
   programs {
      program {
         name:   "showup";
         signal: "elm,state,show,up";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"swallow", st, 30, vl);
            if (strcmp(st, "show_up")) {
              set_state(PART:"swallow", "show_up", 0.0);
              set_state(PART:"top_padding", "show_up", 0.0);
            }
         }
         after: "showupend";
      }
      program {
         name:   "showdown";
         signal: "elm,state,show,down";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"swallow", st, 30, vl);
            if (strcmp(st, "show_down")) {
              set_state(PART:"swallow", "show_down", 0.0);
              set_state(PART:"bottom_padding", "show_down", 0.0);
            }
         }
         after: "showdownend";
      }
      program {
         name:   "showleft";
         signal: "elm,state,show,left";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"swallow", st, 30, vl);
            if (strcmp(st, "show_left")) {
              set_state(PART:"swallow", "show_left", 0.0);
              set_state(PART:"left_padding", "show_left", 0.0);
            }
         }
         after: "showleftend";
      }
      program {
         name:   "showright";
         signal: "elm,state,show,right";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"swallow", st, 30, vl);
            if (strcmp(st, "show_right")) {
              set_state(PART:"swallow", "show_right", 0.0);
              set_state(PART:"right_padding", "show_right", 0.0);
            }
         }
         after: "showrightend";
      }
      program {
         name: "show_clip_blocker";
         signal: "elm,state,show,*";
         source: "elm";
         action: STATE_SET "visible" 0.0;
         transition: SIN_FAC 0.33 1.1;
         target: "layout_clip";
         target: "event_blocker";
      }
      program {
         name:   "showupend";
         action: STATE_SET "visible" 0.0;
         transition: SIN_FAC 0.33 1.1;
         target: "top_padding";
      }
      program {
         name:   "showdownend";
         action: STATE_SET "visible" 0.0;
         transition: SIN_FAC 0.33 1.1;
         target: "bottom_padding";
      }
      program {
         name:   "showleftend";
         action: STATE_SET "visible" 0.0;
         transition: SIN_FAC 0.33 1.1;
         target: "left_padding";
      }
      program {
         name:   "showrightend";
         action: STATE_SET "visible" 0.0;
         transition: SIN_FAC 0.33 1.1;
         target: "right_padding";
      }
      program {
         name:   "hideup";
         signal: "elm,state,hide,up";
         source: "elm";
         action: STATE_SET "show_up" 0.0;
         target: "swallow";
         target: "top_padding";
         transition: SIN_FAC 0.33 1.1;
         after: "be_default";
      }
      program {
         name:   "hidedown";
         signal: "elm,state,hide,down";
         source: "elm";
         action: STATE_SET "show_down" 0.0;
         target: "swallow";
         target: "bottom_padding";
         transition: SIN_FAC 0.33 1.1;
         after: "be_default";
      }
      program {
         name:   "hideleft";
         signal: "elm,state,hide,left";
         source: "elm";
         action: STATE_SET "show_left" 0.0;
         target: "swallow";
         target: "left_padding";
         transition: SIN_FAC 0.33 1.1;
         after: "be_default";
      }
      program {
         name:   "hideright";
         signal: "elm,state,hide,right";
         source: "elm";
         action: STATE_SET "show_right" 0.0;
         target: "swallow";
         target: "right_padding";
         transition: SIN_FAC 0.33 1.1;
         after: "be_default";
      }
      program {
         name:   "hide_clip";
         signal: "elm,state,hide,*";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "layout_clip";
         transition: SIN_FAC 0.33 1.1;
         after: "be_default";
      }
      program {
         name: "hide_event_blocker";
         signal: "elm,state,hide,*";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "event_blocker";
      }
      program {
         name: "be_default";
         action: STATE_SET "default" 0.0;
         target: "swallow";
         target: "top_padding";
         target: "bottom_padding";
         target: "left_padding";
         target: "right_padding";
         after: "hidefinished";
      }
      program {
         name: "hidefinished";
         action: SIGNAL_EMIT "elm,action,hide,finished" "";
      }
   }
}
///////////////////////////////////////////////////////////////////////////////
group {
   name: "elm/ctxpopup/layout/landscape/default";
   inherit: "elm/ctxpopup/layout/default";
   max: (CTXPOPUP_WIDTH_MAX_INC+CTXPOPUP_SHADOW_LEFT_PADDING+CTXPOPUP_SHADOW_RIGHT_PADDING) ((CTXPOPUP_ITEM_HEIGHT_MIN_INC*5)+CTXPOPUP_SHADOW_TOP_PADDING+CTXPOPUP_SHADOW_BOTTOM_PADDING+(CTXPOPUP_SEPARATOR_PXLINE_SIZE_INC*10));
}


group {
   name: "elm/ctxpopup/bg/default";
   parts {
      part {
         name: "bg";
         type: RECT;
         mouse_events: 1;
         description {
            state: "default" 0.0;
            visible: 0;
         }
         description {
            state: "visible" 0.0;
            color: 0 0 0 0;
            min: 1280 1280;
            align: 0.0 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program {
         name:	"clicked_event";
         signal: "mouse,clicked,1";
         source: "bg";
         action: SIGNAL_EMIT "elm,action,click" "";
      }
      program {
         name: "show";
         signal: "elm,state,show";
         source: "elm";
         action: STATE_SET "visible" 0.0;
         target: "bg";
      }
      program {
         name: "hide";
         signal: "elm,state,hide";
         source: "elm";
         action: STATE_SET "default" 0.0;
         target: "bg";
      }
   }
}

group {
   name: "elm/ctxpopup/arrow/default";
   images {
      image: "00_popup_bubble_tail_left.png" COMP;
      image: "00_popup_bubble_tail_right.png" COMP;
      image: "00_popup_bubble_tail_top.png" COMP;
      image: "00_popup_bubble_tail_bottom.png" COMP;
   }
   parts {
      part {
         name: "ctxpopup_arrow";
         type: IMAGE;
         scale: 1;
         description {
            state: "default" 0.0;
            min: CTXPOPUP_ARROW_SIZE_INC;
            max: CTXPOPUP_ARROW_SIZE_INC;
            fixed: 1 1;
            visible: 0;
            align: 0.5 0.5;
         }
         description {
            state: "left" 0.0;
            min: CTXPOPUP_ARROW_SIZE_INC;
            max: CTXPOPUP_ARROW_SIZE_INC;
            fixed: 1 1;
            align: 1.0 0.5;
            image {
               normal: "00_popup_bubble_tail_left.png";
            }
         }
         description {
            state: "right" 0.0;
            min: CTXPOPUP_ARROW_SIZE_INC;
            max: CTXPOPUP_ARROW_SIZE_INC;
            fixed: 1 1;
            align: 0.0 0.5;
            image {
               normal: "00_popup_bubble_tail_right.png";
            }
         }
         description {
            state: "top" 0.0;
            min: CTXPOPUP_ARROW_SIZE_INC;
            max: CTXPOPUP_ARROW_SIZE_INC;
            fixed: 1 1;
            align: 0.5 1.0;
            image {
               normal: "00_popup_bubble_tail_top.png";
            }
         }
         description {
            state: "bottom" 0.0;
            min: CTXPOPUP_ARROW_SIZE_INC;
            max: CTXPOPUP_ARROW_SIZE_INC;
            fixed: 1 1;
            align: 0.5 0.0;
            image {
               normal: "00_popup_bubble_tail_bottom.png";
            }
         }
      }
   }
   programs {
      program {
         name: "enable_left_arrow";
         signal: "elm,state,left";
         source: "elm";
         action: STATE_SET "left" 0.0;
         target: "ctxpopup_arrow";
      }
      program {
         name: "enable_right_arrow";
         signal: "elm,state,right";
         source: "elm";
         action: STATE_SET "right" 0.0;
         target: "ctxpopup_arrow";
      }
      program {
         name: "enable_top_arrow";
         signal: "elm,state,top";
         source: "elm";
         action: STATE_SET "top" 0.0;
         target: "ctxpopup_arrow";
      }
      program {
         name: "enable_bottom_arrow";
         signal: "elm,state,bottom";
         source: "elm";
         action: STATE_SET "bottom" 0.0;
         target: "ctxpopup_arrow";
      }
   }
}
///////////////////////////////////////////////////////////////////////////////
group {
   name: "elm/ctxpopup/text_style_item/default";

   images {
      image: "00_more_popup_press.png" COMP;
   }

   data.item: "item_max_size" CTXPOPUP_TEXT_MAX_INC;

   parts {
      part {
         name: "event_blocker";
         type: RECT;
         mouse_events: 1;
         description {
            state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part {
         name: "bg";
         mouse_events: 0;
         type: IMAGE;
         scale: 1;
         description {
            state: "default" 0.0;
            visible: 0;
            min: (CTXPOPUP_WIDTH_MIN_INC-CTXPOPUP_CONTENT_PADDING_WIDTH*2-CTXPOPUP_PRESS_PADDING*2) 1;
            max: (CTXPOPUP_WIDTH_MAX_INC-CTXPOPUP_CONTENT_PADDING_WIDTH*2-CTXPOPUP_PRESS_PADDING*2) (CTXPOPUP_ITEM_HEIGHT_MAX_INC-CTXPOPUP_PRESS_PADDING*2);
            rel1 {to_x: "bg_press_left_padding"; to_y: "bg_press_top_padding"; relative: 1.0 1.0;}
            rel2 {to_x: "bg_press_right_padding"; to_y: "bg_press_bottom_padding"; relative: 0.0 0.0;}
            image {
               normal: "00_more_popup_press.png";
               border: CTXPOPUP_BUBBLE_BG_PRESSED_IMAGE_BORDER;
               border_scale: 1;
            }
         }
         description {
            state: "clicked" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part {
         name: "bg_press_left_padding";
         mouse_events: 0;
         type: RECT;
         scale: 1;
         description {
            state: "default" 0.0;
            visible: 0;
            min: CTXPOPUP_PRESS_PADDING CTXPOPUP_ITEM_HEIGHT_MIN_INC;
            max: CTXPOPUP_PRESS_PADDING CTXPOPUP_ITEM_HEIGHT_MAX_INC;
            rel1 {to: "bg_press_top_padding"; relative: 0.0 0.0;}
            align: 0 0.5;
         }
      }
      part {
         name: "bg_press_right_padding";
         mouse_events: 0;
         type: RECT;
         scale: 1;
         description {
            state: "default" 0.0;
            visible: 0;
            min: CTXPOPUP_PRESS_PADDING CTXPOPUP_ITEM_HEIGHT_MIN_INC;
            max: CTXPOPUP_PRESS_PADDING CTXPOPUP_ITEM_HEIGHT_MAX_INC;
            rel2 {to: "bg_press_bottom_padding"; relative: 1.0 1.0;}
            align: 1 0.5;
         }
      }
      part {
         name: "bg_press_top_padding";
         mouse_events: 0;
         type: RECT;
         scale: 1;
         description {
            state: "default" 0.0;
            visible: 0;
            min: (CTXPOPUP_WIDTH_MIN_INC-CTXPOPUP_CONTENT_PADDING_WIDTH*2) CTXPOPUP_PRESS_PADDING2;
            max: (CTXPOPUP_WIDTH_MAX_INC-CTXPOPUP_CONTENT_PADDING_WIDTH*2) CTXPOPUP_PRESS_PADDING2;
            rel1 {to: "separator2"; relative: 0.0 1.0;}
            align: 0.5 0;
         }
      }
      part {
         name: "bg_press_bottom_padding";
         mouse_events: 0;
         type: RECT;
         scale: 1;
         description {
            state: "default" 0.0;
            visible: 0;
            min: (CTXPOPUP_WIDTH_MIN_INC-CTXPOPUP_CONTENT_PADDING_WIDTH*2) CTXPOPUP_PRESS_PADDING2;
            max: (CTXPOPUP_WIDTH_MAX_INC-CTXPOPUP_CONTENT_PADDING_WIDTH*2) CTXPOPUP_PRESS_PADDING2;
            align: 0.5 1;
         }
      }
      part {
         name: "separator1";
         mouse_events: 0;
         type: RECT;
         scale: 1;
         description {
            state: "default" 0.0;
            color: CTXPOPUP_SEPARATOR_COLOR_INC;
            rel1 { relative: 0.0 0.0; }
            rel2 { relative: 1.0 1.0; }
            align: 0.5 0;
            min: 0 CTXPOPUP_SEPARATOR_PXLINE_SIZE_INC;
            max: 999999 CTXPOPUP_SEPARATOR_PXLINE_SIZE_INC;
            visible: 0;
         }
         description {
            state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part {
         name: "separator2";
         mouse_events: 0;
         type: RECT;
         scale: 1;
         description {
            state: "default" 0.0;
            color: CTXPOPUP_SEPARATOR2_COLOR_INC;
            rel1 { relative: 0.0 1.0; to: "separator1";}
            rel2 { relative: 1.0 1.0; to: "separator1"; offset: 0 0; }
            align: 0.5 0;
            fixed: 0 1;
            min: 0 CTXPOPUP_SEPARATOR_PXLINE_SIZE_INC;
            max: 999999 CTXPOPUP_SEPARATOR_PXLINE_SIZE_INC;
            visible: 0;
         }
         description {
            state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part {
         name: "left_padding";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description {
            state: "default" 0.0;
            min: (CTXPOPUP_ITEM_TEXT_PADDING_INC-CTXPOPUP_CONTENT_PADDING_WIDTH) CTXPOPUP_ITEM_HEIGHT_MIN_INC;
            max: (CTXPOPUP_ITEM_TEXT_PADDING_INC-CTXPOPUP_CONTENT_PADDING_WIDTH) CTXPOPUP_ITEM_HEIGHT_MAX_INC;
            align: 0 0;
            fixed: 1 1;
            visible: 0;
         }
      }
      part {
         name: "elm.text";
         type: TEXT;
         mouse_events: 0;
         scale: 1;
         description {
            state: "default" 0.0;
            min: 1 (CTXPOPUP_ITEM_HEIGHT_MIN_INC-CTXPOPUP_PRESS_PADDING*2);
            max: CTXPOPUP_TEXT_MAX_INC (CTXPOPUP_ITEM_HEIGHT_MAX_INC-CTXPOPUP_PRESS_PADDING*2);
            align: 0.5 0.5;
            rel1 {relative: 1.0 0.0; to_x: "left_padding"; to_y: "bg";}
            rel2 {relative: 0.0 1.0; to_x: "right_padding"; to_y: "bg";}
            color: CTXPOPUP_LIST_MAIN_TEXT_COLOR_INC;
            text {
               font: "Tizen:style=Regular";
               size: CTXPOPUP_LIST_MAIN_TEXT_SIZE_INC;
               size_range: CTXPOPUP_LIST_MAIN_TEXT_SIZE_INC CTXPOPUP_LIST_MAIN_TEXT_MAX_SIZE_INC;
               align: 0 0.5;
               min: 1 1;
               text_class: "list_item";
            }
         }
         description {
            state: "clicked" 0.0;
            inherit: "default" 0.0;
            color: CTXPOPUP_LIST_MAIN_TEXT_PRESS_COLOR_INC;
            text.min: 0 1;
         }
         description {
            state: "disabled" 0.0;
            inherit: "default" 0.0;
            color: CTXPOPUP_LIST_MAIN_TEXT_DIM_COLOR_INC;
         }
         description {
            state: "ellipsis" 0.0;
            inherit: "default" 0.0;
            min: CTXPOPUP_TEXT_MAX_INC CTXPOPUP_ITEM_HEIGHT_MIN_INC;
            text.min: 0 1;
         }
         description {
            state: "ellipsis_disabled" 0.0;
            inherit: "ellipsis" 0.0;
            color: CTXPOPUP_LIST_MAIN_TEXT_DIM_COLOR_INC;
         }
      }
      part {
         name: "right_padding";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description {
            state: "default" 0.0;
            visible: 0;
            min: (CTXPOPUP_ITEM_TEXT_PADDING_INC-CTXPOPUP_CONTENT_PADDING_WIDTH) CTXPOPUP_ITEM_HEIGHT_MIN_INC;
            max: (CTXPOPUP_ITEM_TEXT_PADDING_INC-CTXPOPUP_CONTENT_PADDING_WIDTH) CTXPOPUP_ITEM_HEIGHT_MAX_INC;
            fixed: 1 1;
            align: 1.0 1.0;
         }
      }
      part {
         name: "over1";
         type: RECT;
         mouse_events: 1;
         repeat_events: 1;
         description {
            state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part {
         name: "over2";
         type: RECT;
         mouse_events: 1;
         repeat_events: 1;
         dragable {
            x: 1 1 0;
            y: 1 1 0;
         }
         description {
            state: "default" 0.0;
            rel1.to:"bg";
            rel2.to:"bg";
            color: 0 0 0 0;
         }
      }
      part {
         name: "disclip";
         type: RECT;
         description {
            state: "default" 0.0;
            visible: 0;
         }
         description {
            state: "disabled" 0.0;
            visible: 1;
            color: CTXPOPUP_ITEM_DISABLED_COLOR;
         }
      }
   }
   programs {
      program {
         name: "text_default";
         signal: "elm,state,text,default";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "disabled") || !strcmp(st, "ellipsis_disabled"))
              set_state(PART:"elm.text", "disabled", 0.0);
            else
              set_state(PART:"elm.text", "default", 0.0);
         }
      }
      program {
         name: "text_ellipsis";
         signal: "elm,state,text,ellipsis";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "disabled") || !strcmp(st, "elipsis_disabled"))
              set_state(PART:"elm.text", "ellipsis_disabled", 0.0);
            else
              set_state(PART:"elm.text", "ellipsis", 0.0);
         }
      }
      program {
         name: "item_unclick";
         signal: "mouse,clicked,1";
         source: "over1";
         action: SIGNAL_EMIT "elm,action,click" "";
         after: "touch_snd";
      }
      program {
         name: "touch_snd";
         action: PLAY_SAMPLE "touch_sound" 1.0;
      }
      program {
         name: "disable";
         signal: "elm,state,disabled";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if ((!strcmp(st, "ellipsis")) || (!strcmp(st, "ellipsis_disabled")))
              set_state(PART:"elm.text", "ellipsis_disabled", 0.0);
            else
              set_state(PART:"elm.text", "disabled", 0.0);

            set_state(PART:"disclip", "disabled", 0.0);
         }
      }
      program {
         name: "enable";
         signal: "elm,state,enabled";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if ((!strcmp(st, "ellipsis")) || (!strcmp(st, "ellipsis_disabled")))
              set_state(PART:"elm.text", "ellipsis", 0.0);
            else
              set_state(PART:"elm.text", "default", 0.0);

            set_state(PART:"disclip", "default", 0.0);
         }
      }
      program {
         name: "default";
         signal: "elm,state,default";
         source: "elm";
         script {
            set_state(PART:"separator1", "default", 0.0);
            set_state(PART:"separator2", "default", 0.0);
         }
      }
      program {
         name: "separator";
         signal: "elm,state,separator";
         source: "elm";
         script {
            set_state(PART:"separator1", "visible", 0.0);
            set_state(PART:"separator2", "visible", 0.0);
         }
      }
      program {
         name: "item_click2";
         signal: "mouse,down,1";
         source: "over2";
         script {
            set_state(PART:"elm.text", "clicked", 0.0);
            set_state(PART:"bg", "clicked", 0.0);
         }
      }
      program {
         name: "drag";
         signal: "drag";
         source: "over2";
         script {
            new Float:dx, Float:dy;
            get_drag(PART:"over2", dx, dy);
            if ((abs(dx) > 20) || (abs(dy) > 20)) {
               set_drag(PART:"over2", 0.0, 0.0);
               set_state(PART:"bg", "default", 0.0);
            }
            set_drag(PART:"over2", 0.0, 0.0);
         }
      }
      program {
         name: "item_unclick2";
         signal: "mouse,up,1";
         source: "over2";
         script {
            set_drag(PART:"over2", 0.0, 0.0);
            set_state(PART:"bg", "default", 0.0);
         }
      }
   }
}
