/*
* Copyright (c) 2000-2015  Samsung Electronics Co., Ltd All Rights Reserved
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/

#define PV_IMAGE_VIEW_FLICK_TIMER 0.3
#define ICON_PLAY_VIDEO_260x260 "T01-1_album_video_play.png"
 
collections {
	group {
		name: "slider_new";
		images {
			image: ICON_PLAY_VIDEO_260x260 COMP;
		}
		parts{
			part {
				name: "glsurface";
				type: SWALLOW;
				mouse_events: 1;
				repeat_events: 1;
				scale:1;
				description {
					state: "default" 0.0;
					color: 0 0 0 255;
					rel1.relative: 0.0 0.0;

// When Pixmap size is changed( rotate ), we should re-create pixmap with changed size.
// But this procedure takes some time( ~ several mili-second)
// So we fixs it'size to 1280x1280 and just change view port size.
					align: 0.5 0.5;
					min: 300 493;
					max: 300 493;
					fixed: 1 1;
				}
				description {
					state: "defualt_select_mode" 0.0;
					color: 0 0 0 255;
					rel1.relative: 0.0 0.0;
					align: 0.0 0.5;
					min: 300 460;
					max: 300 460;
					fixed: 1 1;
				}
				description {
					state: "landscape" 0.0;
					color: 0 0 0 255;
					rel1.relative: 0.0 0.0;

// When Pixmap size is changed( rotate ), we should re-create pixmap with changed size.
// But this procedure takes some time( ~ several mili-second)
// So we fixs it'size to 1280x1280 and just change view port size.
					align: 0.5 0.5;
					min: 480 277;
					max: 480 277;
					fixed: 1 1;
				}
				description {
					state: "landscape_select_mode" 0.0;
					color: 0 0 0 255;
					rel1.relative: 0.0 0.0;
					align: 0.5 1;
					min: 480 245;
					max: 480 245;
					fixed: 1 1;
				}
			}
			part {
				name: "event_box";		// Getting event
				type: SWALLOW;
				mouse_events: 1;
				repeat_events: 1;
				scale:1;
				description {
					state: "default" 0.0;
					color: 0 0 0 0;
					rel1.relative: 0.0 0.0;
					align: 0.0 0.0;
					min: 240 320;
					max: 240 320;
					fixed: 1 1;
				}
			}
			part {
				name: "slider.event";
				type: RECT;
				mouse_events: 1;
				repeat_events: 1;
				scale:1;
				description {
					state: "default" 0.0;
					color: 0 0 0 0;
					rel1.relative: 0.0 0.0;
					rel2.relative: 1.0 1.0;
					visible: 1;
				}
			}

			/* image view area */
			part {
				name: "imageview_area";
				mouse_events: 1;
				repeat_events: 1;
				type: SWALLOW;
				scale: 1;
				description {
					state: "default" 0.0;
					align: 0.0 0.0;
					visible: 1;
					rel1 {
						relative: 0 0;
						to: "glsurface";
					}
					rel2 {
						relative: 1 1;
						to: "glsurface";
					}
					color: 0 0 0 0;
				}
				description {
					state: "stop" 0.0;
					align: 0 0;
					visible: 1;
					rel1 {
						relative: 0 0;
						to: "glsurface";
					}
					rel2 {
						relative: 1 1;
						to: "glsurface";
					}
					color: 0 0 0 0;
				}
				description {
					state: "left" 0.0;
					inherit: "default" 0.0;
					rel1 {
						relative: -1 0;
						to: "glsurface";
					}
					rel2 {
						relative: 0 1;
						to: "glsurface";
					}
				}
				description {
					state: "right" 0.0;
					inherit: "default" 0.0;
					rel1 {
						relative: 1 0;
						to: "glsurface";
					}
					rel2 {
						relative: 2 1;
						to: "glsurface";
					}
				}
			}

			/* temp image view area */
			part {
				name: "imageview_area_temp2";
				mouse_events: 1;
				repeat_events: 1;
				type: SWALLOW;
				scale: 1;
				description {
					state: "default" 0.0;
					align: 0 0;
					visible: 1;
					rel1 {
						relative: 0 0;
						to: "glsurface";
					}
					rel2 {
						relative: 1  1;
						to: "glsurface";
					}
					color: 0 0 0 0;
				}
				description {
					state: "stop" 0.0;
					align: 0 0;
					visible: 1;
					rel1 {
						relative: 0 0;
						to: "glsurface";
					}
					rel2 {
						relative: 1 1;
						to: "glsurface";
					}
					color: 0 0 0 0;
				}
				description {
					state: "left" 0.0;
					inherit: "default" 0.0;
					rel1 {
						relative: -1 0;
						to: "glsurface";
					}
					rel2 {
						relative: 0 1;
						to: "glsurface";
					}
				}
				description {
					state: "right" 0.0;
					inherit: "default" 0.0;
					rel1 {
						relative: 1 0;
						to: "glsurface";
					}
					rel2 {
						relative: 2 1;
						to: "glsurface";
					}
				}
				description { state: "invisible" 0.0;
				inherit: "default" 0.0;
				visible: 0;
				}
			}
			part {
				name: "imageview_area_temp0";
				mouse_events: 1;
				repeat_events: 1;
				type: SWALLOW;
				scale: 1;
				description {
					state: "default" 0.0;
					align: 0 0;
					visible: 1;
					rel1 {
						relative: 0 0;
						to: "glsurface";
					}
					rel2 {
						relative: 1  1;
						to: "glsurface";
					}
					color: 0 0 0 0;
				}
				description {
					state: "stop" 0.0;
					align: 0 0;
					visible: 1;
					rel1 {
						relative: 0 0;
						to: "glsurface";
					}
					rel2 {
						relative: 1 1;
						to: "glsurface";
					}
					color: 0 0 0 0;
				}
				description {
					state: "left" 0.0;
					inherit: "default" 0.0;
					rel1 {
						relative: -1 0;
						to: "glsurface";
					}
					rel2 {
						relative: 0 1;
						to: "glsurface";
					}
				}
				description {
					state: "right" 0.0;
					inherit: "default" 0.0;
					rel1 {
						relative: 1 0;
						to: "glsurface";
					}
					rel2 {
						relative: 2 1;
						to: "glsurface";
					}
				}
				description { state: "invisible" 0.0;
				inherit: "default" 0.0;
				visible: 0;
				}
			}
			part {
				name: "Dummy_ForeGround";
				mouse_events: 1;
				repeat_events: 1;
				type: RECT;
				scale: 1;
				description {
					state: "default" 0.0;
					align: 0 0;
					visible: 0;
					rel1 {
						relative: 0 0;
						to: "glsurface";
					}
					rel2 {
						relative: 1  1;
						to: "glsurface";
					}
					color: 0 0 0 255;
				}
				description {
					state: "show" 0.0;
					align: 0 0;
					visible: 1;
					rel1 {
						relative: 0 0;
						to: "glsurface";
					}
					rel2 {
						relative: 1  1;
						to: "glsurface";
					}
					color: 0 0 0 255;
				}
			}
			part {
				name: "video_play_icon";
				type: IMAGE;
				mouse_events: 1;
				repeat_events: 1;
				scale: 0.2;
				description {
					state: "default" 0.0;
					align: 0.5 0.5;
					min: 96 96 ;
					max: 96 96 ;
					visible : 1 ;
					image.normal : ICON_PLAY_VIDEO_260x260 ;
					fixed: 1 1;
				}
				description {
					state: "hide" 0.0;
					align: 0.5 0.5;
					min: 96 96 ;
					max: 96 96 ;
					visible : 0 ;
					image.normal : ICON_PLAY_VIDEO_260x260 ;
					fixed: 1 1;
				}
			}
		}
		script {
			public t;
			public Toggler(val)
			  {
				if (val == 1) {
					cancel_timer(t);
					set_state(PART:"Dummy_ForeGround","default",0.0);
				} else {
					set_state(PART:"Dummy_ForeGround","show",0.0);
					t = timer(0.01,"Toggler",val + 1);
				}
			  }
		}
		programs {
			program {
				name: "video_icon_hide";
				signal: "hide,icon";
				source: "video_play_icon";
				action: STATE_SET "hide" 0.0;
				target: "video_play_icon";
			}
			program {
				name: "video_icon_show";
				signal: "show,icon";
				source: "video_play_icon";
				action: STATE_SET "default" 0.0;
				target: "video_play_icon";
			}
			program {
				name:"video_icon_clicked";
				source:"video_play_icon";
				signal : "mouse,down,1" ;
				action: SIGNAL_EMIT "play" "elm";
			}
			program {
				name: "landscape";
				signal: "set_landscape";
				source: "glsurface";
				action: STATE_SET "landscape" 0.0;
				target: "glsurface";
			}
			program {
				name: "Show_Dummy_ForeGround_landscape";
				signal: "set_landscape";
				source: "glsurface";
				script {
					Toggler(0);
				}
			}
			program {
				name: "portrait";
				signal: "set_portrait";
				source: "glsurface";
				action: STATE_SET "default" 0.0;
				target: "glsurface";
			}
			program {
				name: "Show_Dummy_ForeGround_portrait";
				signal: "set_portrait";
				source: "glsurface";
				script {
					Toggler(0);
				}
			}
			program {
				name: "select_view_landscape";
				signal: "set_select_view_landscape";
				source: "glsurface";
				action: STATE_SET "landscape_select_mode" 0.0;
				target: "glsurface";
			}
			program {
				name: "Show_Dummy_ForeGround_landscape_select_view";
				signal: "set_select_view_landscape";
				source: "glsurface";
				script {
					Toggler(0);
				}
			}
			program {
				name: "select_view_portrait";
				signal: "set_select_view_portrait";
				source: "glsurface";
				action: STATE_SET "defualt_select_mode" 0.0;
				target: "glsurface";
			}
			program {
				name: "Show_Dummy_ForeGround_portrait_select_view";
				signal: "set_select_view_portrait";
				source: "glsurface";
				script {
					Toggler(0);
				}
			}
			program {
				name: "flick_left";
				signal: "flick_left";
				source: "imageview_area";
				action: STATE_SET "left" 0.0;
				target: "imageview_area";
				transition: LINEAR PV_IMAGE_VIEW_FLICK_TIMER CURRENT;
			}
			program {
				name: "flick_left_temp2";
				signal: "flick_left";
				source: "imageview_area_temp2";
				action: STATE_SET "left" 0.0;
				target: "imageview_area_temp2";
				transition: LINEAR PV_IMAGE_VIEW_FLICK_TIMER CURRENT;
			}
			program {
				name: "flick_left_temp0";
				signal: "flick_left";
				source: "imageview_area_temp0";
				action: STATE_SET "left" 0.0;
				target: "imageview_area_temp0";
				transition: LINEAR PV_IMAGE_VIEW_FLICK_TIMER CURRENT;
			}
			program {
				name: "flick_right";
				signal: "flick_right";
				source: "imageview_area";
				action: STATE_SET "right" 0.0;
				target: "imageview_area";
				transition: LINEAR PV_IMAGE_VIEW_FLICK_TIMER CURRENT;
			}
			program {
				name: "flick_right_temp0";
				signal: "flick_right";
				source: "imageview_area_temp0";
				action: STATE_SET "right" 0.0;
				target: "imageview_area_temp0";
				transition: LINEAR PV_IMAGE_VIEW_FLICK_TIMER CURRENT;
			}
			program {
				name: "flick_right_temp2";
				signal: "flick_right";
				source: "imageview_area_temp2";
				action: STATE_SET "right" 0.0;
				target: "imageview_area_temp2";
				transition: LINEAR PV_IMAGE_VIEW_FLICK_TIMER CURRENT;
			}
			program {
				name: "set_right_temp2";
				signal: "set_right";
				source: "imageview_area_temp2";
				action: STATE_SET "right" 0.0;
				target: "imageview_area_temp2";
			}
			program {
				name: "set_right_temp0";
				signal: "set_right";
				source: "imageview_area_temp0";
				action: STATE_SET "right" 0.0;
				target: "imageview_area_temp0";
			}
			program {
				name: "set_right";
				signal: "set_right";
				source: "imageview_area";
				action: STATE_SET "right" 0.0;
				target: "imageview_area";
			}
			program {
				name: "set_left_temp0";
				signal: "set_left";
				source: "imageview_area_temp0";
				action: STATE_SET "left" 0.0;
				target: "imageview_area_temp0";
			}
			program {
				name: "set_left";
				signal: "set_left";
				source: "imageview_area";
				action: STATE_SET "left" 0.0;
				target: "imageview_area";
			}
			program {
				name: "set_left_temp2";
				signal: "set_left";
				source: "imageview_area_temp2";
				action: STATE_SET "left" 0.0;
				target: "imageview_area_temp2";
			}
			program {
				name: "set_default_temp";
				signal: "set_default";
				source: "imageview_area_temp2";
				action: STATE_SET "default" 0.0;
				target: "imageview_area_temp2";
				transition: LINEAR PV_IMAGE_VIEW_FLICK_TIMER CURRENT;
			}
			program {
				name: "set_stop_temp2";
				signal: "set_stop";
				source: "imageview_area_temp2";
				action: STATE_SET "stop" 0.0;
				target: "imageview_area_temp2";
			}
			program {
				name: "set_stop";
				signal: "set_stop";
				source: "imageview_area";
				action: STATE_SET "stop" 0.0;
				target: "imageview_area";
			}
			program {
				name: "set_stop_temp0";
				signal: "set_stop";
				source: "imageview_area_temp0";
				action: STATE_SET "stop" 0.0;
				target: "imageview_area_temp0";
			}
			program {
				name: "set_default";
				signal: "set_default";
				source: "imageview_area";
				action: STATE_SET "default" 0.0;
				target: "imageview_area";
				after : "set_default_temp_invsible";
			}
			program {
				name: "set_default_temp_invsible";
				signal: "set_temp_invsible";
				source: "imageview_area_temp2";
				action: STATE_SET "invisible" 0.0;
				target: "imageview_area_temp2";
			}
		}
	}
}
